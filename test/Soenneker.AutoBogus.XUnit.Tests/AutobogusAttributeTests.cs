using System;
using System.Collections.Generic;
using AwesomeAssertions;
using Soenneker.AutoBogus.XUnit.Tests.Dtos;
using Xunit;

namespace Soenneker.AutoBogus.XUnit.Tests;

/// <summary>
/// Tests demonstrating the AutoBogusAttribute working as an xUnit v3 DataAttribute
/// These tests show the attribute working as intended with [Theory] and automatic parameter generation.
/// </summary>
public class AutoBogusAttributeParameterInjectionTest
{
    /// <summary>
    /// Demonstrates basic automatic parameter injection with a single parameter.
    /// </summary>
    [Theory]
    [AutoBogus]
    public void SingleParameter_ShouldBeAutomaticallyGenerated(TestClassWithSimpleProperties testClass)
    {
        // The testClass parameter is automatically generated by the [AutoBogus] attribute
        testClass.Should().NotBeNull();
        testClass.Name.Should().NotBeNullOrEmpty();
        testClass.Id.Should().NotBe(0);
        testClass.CreatedAt.Should().NotBe(default(DateTime));
    }

    /// <summary>
    /// Demonstrates automatic parameter injection with multiple parameters.
    /// </summary>
    [Theory]
    [AutoBogus]
    public void MultipleParameters_ShouldBeAutomaticallyGenerated(
        TestClassWithSimpleProperties testClass,
        TestRecord testRecord,
        Order order)
    {
        // All parameters are automatically generated by the [AutoBogus] attribute
        testClass.Should().NotBeNull();
        testClass.Name.Should().NotBeNullOrEmpty();

        testRecord.Should().NotBeNull();
        testRecord.Name.Should().NotBeNullOrEmpty();

        order.Should().NotBeNull();
        order.Id.Should().NotBe(0);
    }

    /// <summary>
    /// Demonstrates automatic parameter injection with primitive types.
    /// </summary>
    [Theory]
    [AutoBogus]
    public void PrimitiveTypes_ShouldBeAutomaticallyGenerated(
        string name,
        int age,
        decimal price,
        DateTime date)
    {
        // Primitive parameters are automatically generated by the [AutoBogus] attribute
        name.Should().NotBeNullOrEmpty();
        age.Should().NotBe(0);
        price.Should().NotBe(0);
        date.Should().NotBe(default(DateTime));
    }

    /// <summary>
    /// Demonstrates automatic parameter injection with collections.
    /// </summary>
    [Theory]
    [AutoBogus]
    public void Collections_ShouldBeAutomaticallyGenerated(List<TestClassWithSimpleProperties> testClasses)
    {
        // The collection parameter is automatically generated by AutoBogus
        testClasses.Should().NotBeNull();
        testClasses.Should().NotBeEmpty();

        foreach (TestClassWithSimpleProperties testClass in testClasses)
        {
            testClass.Should().NotBeNull();
            testClass.Name.Should().NotBeNullOrEmpty();
            testClass.Id.Should().NotBe(0);
        }
    }

    /// <summary>
    /// Demonstrates generating multiple test cases with the Count property.
    /// </summary>
    [Theory]
    [AutoBogus(count: 3)]
    public void MultipleTestCases_ShouldGenerateDifferentData(TestClassWithSimpleProperties testClass)
    {
        // This test will run 3 times with different generated data each time
        testClass.Should().NotBeNull();
        testClass.Name.Should().NotBeNullOrEmpty();
    }

    /// <summary>
    /// Demonstrates deterministic data generation using the Seed property.
    /// </summary>
    [Theory]
    [AutoBogus(count: 2, seed: 12345)]
    public void DeterministicGeneration_WithSeed_ShouldGenerateSameData(TestClassWithSimpleProperties testClass)
    {
        // This test will run 2 times with the same generated data (due to seed)
        testClass.Should().NotBeNull();
        testClass.Name.Should().NotBeNullOrEmpty();
    }

    /// <summary>
    /// Demonstrates automatic parameter injection with nullable types.
    /// </summary>
    [Theory]
    [AutoBogus]
    public void NullableTypes_ShouldBeAutomaticallyGenerated(
        int? nullableInt,
        string? nullableString,
        DateTime? nullableDateTime)
    {
        nullableInt.HasValue.Should().BeTrue();
        nullableString.Should().NotBeNull();
        nullableDateTime.HasValue.Should().BeTrue();
    }

    /// <summary>
    /// Demonstrates automatic parameter injection with complex nested objects.
    /// </summary>
    [Theory]
    [AutoBogus]
    public void ComplexObjects_ShouldBeAutomaticallyGenerated(Order order)
    {
        // Complex objects with nested properties are automatically generated
        order.Should().NotBeNull();
        order.Id.Should().NotBe(0);
        order.Items.Should().NotBeNullOrEmpty();
    }
}
